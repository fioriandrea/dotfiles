#!/bin/awk -f

BEGIN {
    "ps -p $PPID -o comm=" | getline CMDNAME
    processCLIArgs()
}

/^#/ {
    next
}

$1 ~ /@start/ {
    start = $2
}

$1 ~ /@end/ {
    end = $2
}

{
    if (NF < 2) {
        exiterror(sprintf("at line %d: parse error: must provide source and destination", NR))
    }
    src = $1
    dest = $2
    cost = NF >= 3 ? $3 : 1
    if (cost < 0) {
        exiterror(sprintf("at line %d: semantic error: negative costs are not allowed", NR))
    }
    neighbors[src, ++branching[src]] = dest
    costs[src, dest] = cost
    niceness[src] = -log(0)
    niceness[dest] = -log(0)
}

END {
    if (myexitinvoked) {
        exit myexitstatus
    }
    if (!(start in niceness)) {
        exiterror("start node not set")
    }
    if (!(end in niceness)) {
        exiterror("end node not set")
    }
    if (!dijkstra()) {
        exiterror("solution not found")
    }
}

function dijkstra(    i) {
    niceness[start] = 0
    openset[start]
    while (!isempty(openset)) {
        node = popmin(openset)
        if (node == end) {
            if (pathflag) {
                printpath(end)
            }
            if (costflag) {
                printf("total cost: %f\n", niceness[end])
            }
            return 1
        }
        for (i = 1; i <= branching[node]; i++) {
            neighbor = neighbors[node, i]
            if (niceness[node] + costs[node, neighbor] < niceness[neighbor]) {
                niceness[neighbor] = niceness[node] + costs[node, neighbor]
                parent[neighbor] = node
                openset[neighbor]
            }
        }
    }
    return 0
}

function printpath(node,    pathnode) {
    pathnode = node
    while (pathnode in parent) {
        print pathnode
        pathnode = parent[pathnode]
    }
    print pathnode
}

function isempty(array,    elem) {
    for (elem in array) {
        return 0
    }
    return 1
}

function popmin(openset,    minsofar, elem, res) {
    minsofar = -log(0)
    for (elem in openset) {
        if (minsofar > niceness[elem]) {
            res = elem
            minsofar = niceness[elem]
        }
    }
    delete openset[res]
    return res
}

function help(    oldofs) {
    oldofs = OFS
    OFS = "\n"
    print CMDNAME " [options]",
    "",
    "Finds shortest path.",
    "",
    "DESCRIPTION",
    "",
    CMDNAME " finds the shortest path between two node in a graph.",
    "Graphs are specified as source-destination-cost triplets, for example:",
    "",
    "1 2 4",
    "1 3",
    "2 4 2",
    "2 5 3",
    "@start 1",
    "@end 4",
    "",
    "If cost is not given, it is assumed to be 1.",
    "",
    "OPTIONS",
    "",
    "h         Prints this help",
    "nopath    Don't print the path",
    "cost      Print the total cost",
    "!         Like -- in other utilities"
    OFS = oldofs
}

function processCLIArgs(    i, j) {
    pathflag = 1
    costflag = 0
    for (i = 1; i < ARGC; ++i) {
        if (ARGV[i] == "h") {
            help()
            myexit(0)
        } else if (ARGV[i] == "cost") {
            costflag = 1
        } else if (ARGV[i] == "nopath") {
            pathflag = 0
        } else if (ARGV[i] == "!") {
            i++
            break
        } else {
            break
        }
    }
    for (j = 1; j < i; ++j) {
        ARGV[j] = ""
    }
}

function exiterror(message) {
    printf("%s: %s\n", CMDNAME, message) > "/dev/stderr"
    myexit(1)
}

function myexit(status) {
    myexitinvoked = 1
    exit (myexitstatus = status)
}

